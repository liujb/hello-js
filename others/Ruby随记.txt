局部变量、方法参数和方法名称应该用一个小写字母开头或者
用一个下划线开头；全局变量用美元符作为前缀 $；而实例变量用 @ 开头；类变
量用 @@ 开头；类名、模块名和常量应该用大写字母开头。 

Ruby 数据类型有数字，字符串，数组，哈希表，区间，正则表达式。 


  == （等于）    
 ！= （不等于） 
比较两个对象的值是否相等 ,返回 true, flase  
a=1;  b=1.0;  a==b  #true 
eql? 比较两个对象的值、类型是否相等,返回 true, flase  
a=1;  b=1.0;  a.eql?(b) #flase（a为整数型，b为浮点型） 
equal? 


<=> 比较两个对象的大小，大于、等于、小于 分别返回1,0,-1 
"aab" <=> "acb" # -1  （第二个 a 的 ASCII 码小于 c） 
[5] <=> [4,9]   # 1    （第一个元素 5 > 4） 
=== 右边的对象是否在左边区间之内,返回 true, flase 
 puts  (0..9)=== 3.14       #true  
puts  ('a'..'f')=== 'c'     # true 
=~（匹配） 用来比较是否符合一个正则表达式,返回模式在字符串中被匹配到的
位置，否则返回 nil 
!~ (不匹配) 断言不符合一个正则表达式,返回 true, flase 


1) if  条件①  then 语句1; 语句2 ; 语句…  end  2) （ 语句1; 语句2 ; 语句… ）   if   条件  

unless  条件  =  if  not (条件) 


在循环体内，如果遇到： 
break ，跳出当层循环； 
next ，忽略本次循环的剩余部分，开始下一次的循环； 
redo ，重新开始循环，还是从这一次开始； 
retry ，重头开始这个循环体。 


与 Java 中的 try…catch…finally…throw 相对应, Ruby 中用 begin/end …rescue…ensure … raise 来处理异常，retry 可以用在 rescue 中。可以只
用 rescue 或是 ensure，两者都使用时，rescue 必须在 ensure 前。 
如果你初识 Ruby，不必理会异常与线程。Java 程序员用异常来保证文件和数
据库连接的关闭。 


module...end

require，load 用于包含文件；include，extend 则用于包含模块。 z require 加载文件一次，load 加载文件多次。 z require 加载文件时可以不加后缀名，load 加载文件时必须加后缀名。 
z require 一般情况下用于加载库文件，而 load 用于加载配置文件。